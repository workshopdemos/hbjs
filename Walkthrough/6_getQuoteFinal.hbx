/*
 * Rename this file by right clicking the file name in the explorer to the right and selecting rename.  The 
 * new file name should be prefixed by your user id.  If your user id is mfwsuser## your new file name would
 * be mfwsuser##_getQuoteFinal.hbx
 */

/*
 * Below is a near production ready web service.  Added are try catches to protect from errors and to be sure
 * to always return valid JSON.  Also the option to return XML instead of JSON was added along with more
 * information on how the service ran, elapsed time, number of transaction executed, etc
 */

// If I am going to measure the elapsed time I need to capture the start time of the service in microseconds
let startTime = HB.stckf();
let hb = new HB.Session();

let common = require('common', 'hbutils');
let debugging = require('debugging', 'hbutils');

debugging.checkDebugControl();
common.hbRunProto();

/*
 * Lets update response to return more information than just the real-time quote
 */
var response = {
    quotes: [],             // quotes will still contain the real time quote for each company
    status: {               // Create a status block to keep all the info about how the service ran
        success: false,     // Create a single flag the client can check to see if the service ran okay
        elapsedTime: 0,     // How long did it take for the service to run, elapsed time
        tranCount: 0,       // How many transactions did we run
        errors: []          // A place to store error messages and the error stack
    }
}

function initialize() {
    hb.set('hb_entry', 'trad');
    hb.run('HB_AID=ENTER', 'T002');

    let companies = HB.request.http.getValue('companies');

    if (typeof(companies) === 'undefined') {  
        companies = '1,2,3,4';      // If companies is undefined then lets return all company real-time quotes
    }

    let type = HB.request.http.getValue('type');

    if (typeof(type) === 'undefined') {
        type = 'json'               // If type is undefined then we will return JSON output
    }

    return ({
        companies: companies.split(','),
        type : type
    });
}

function terminate(type) {

    hb.run('hb_aid=pf12&hb_delete_session=1');

    /*
     * Now we are at the end lets set the elapsed time and transaction count into the response
     */
    response.status.elapsedTime = HB.stckf() - startTime;
    response.status.tranCount = hb.tranCount;

    /*
     * Do we output XML or JSON, type will know
     */
    if (type === 'xml') {
        common.headers.xml();
        write(common.jsToXML(response, 'getQuote'));
    } else {
        common.headers.json();
        write(common.toJSONString(response));
    }
}


function getQuote(companyNumber) {
    hb.set('OPTION', companyNumber);
    hb.run('HB_AID=ENTER', 'T003');

    hb.set('OPT2', '1');
    hb.run('HB_AID=ENTER', 'T004');

    let quote = {
        companyName: hb.getFieldValue('COMP41'),
        currentPrice: hb.getFieldValue('SHRNOW'),
        sharesHeld: hb.getFieldValue('HELD'),
        buyCommission: hb.getFieldValue('BUY'),
        sellCommission: hb.getFieldValue('Sell'),
        totalValue: hb.getFieldValue('VALUE')
    }

    // We now want to push are individual quotes on to the quotes array in the response
    response.quotes.push(quote);

    hb.run('hb_aid=pf3', 'T003');
    hb.run('hb_aid=pf3', 'T002');

}


function main () {

    /*
     * We need to wrapper all of our code in a try catch so that if 
     * any errors occur we will always output either JSON or XML
     */
    try {
        /*
        * Initialize not only returns the list of companies to be processed
        * but also the type of output to be produced
        */
        var input = initialize();
        
        for (let i = 0; i < input.companies.length; i++) {
            getQuote(input.companies[i]);
        }

        // if we get to here then no errors occured and we can indicate that
        // the service was a success
        response.status.success = true;

    } catch (e) {
        // If an error was caught then push it on to the error array so that it
        // can be produced in the JSON or XML output
        response.status.errors.push(e);
    } finally {
        // If we run successfully or not we always want to run terminate
        terminate(input.type);
    }
}



main();

/*
 * You can compile and deploy (MAKE) this code by right-clicking in this editor window and selecting 
 * "HB.js Commands > Make". You can invoke the deployed web service by using a web browser and opening the link 
 * below.  Be sure and change the service name to the name you used above.  Do not include the ".hbx" 
 * 
 * Remember to change the "##" to your user number 
 * https://external-943025290693663.proxy.sn.ws.broadcom.com/hbscript/mfwsuser##_getQuoteFinal?companies=1,3&type=xml
 */


/*
 * More protections could be built into this service.  Try running the service with companies=X or companies=6.
 * Can you improve this service further???
 */
